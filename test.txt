#include <iostream>
using namespace std;

#define uint unsigned int
#define pln(x) cout << x << endl;

uint32_t clp2(uint32_t x) {
   x = x - 1;
   x = x | (x >> 1);
   x = x | (x >> 2);
   x = x | (x >> 4);
   x = x | (x >> 8);
   x = x | (x >> 16);
   return x + 1;
}

const uint SIZE = 256;
const uint BLOCK_SIZE = 8; 
const uint TYPES_AMOUNT = 6; // 8 16 32 64 128 256
unsigned char MEM[SIZE];

uint BITMAP;
uint TYPES_LIST[TYPES_AMOUNT];

bool is_free(uint start, uint end) {
    for (; start < end; start++) if ((1<<start) & BITMAP) return false;
    return true;
}

int find_addr(uint level) {
    int addr = -1;
    uint type_bmap = TYPES_LIST[level];
    uint bits_amount = SIZE/(BLOCK_SIZE << level);
    for (uint i = 0; i < bits_amount; i++) if ( (1 << i) & type_bmap) addr = i;
    return addr;

}

int allocate(uint size) {
    uint level = 0;
    while (size > (BLOCK_SIZE << level)) level++;
    int addr = find_addr(level);
    pln(level); pln(addr);
    return 0;
}


int main() {
    TYPES_LIST[0] = 1; //  1 -> 0 0 -> 0 0 0 0 -> ... on INIT
    cout << is_free(1, 4);
    cin.get();
    return 0;
}
