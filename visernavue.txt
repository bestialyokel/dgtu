<template>
    <div class="calendar">
        <div class="header">
            <button v-if="!disablePrev" @click="decMonth" class="day btn prev hover">p</button>
            <span class="title">{{  [lang.shortMonths[_month], _year].join(' ')  }}</span>
            <button v-if="!disableNext" @click="incMonth" class="day btn next hover">n</button>
        </div>
        <div class="days-header">
            <div class="day" v-for="n in 7" :key="n">{{lang.shortWeekDays[n-1]}}</div>
        </div>
        <div class="days-container">
            <div  v-for="n in 42" 
                  @click="handleDateClick(n - pmd(_year, _month))"
                  :key="n - pmd(_year, _month)" 
                  class="day hover" 
                  :class="dateClass(n - pmd(_year, _month))"> <!-- MAKE SELECTED WORK -->
                {{ dateNumber(n - pmd(_year, _month)) }}
            </div>
        </div>
    </div>
</template>

<script>

let pmd = (year, month) => {
    let date = new Date(year, month); 
    date.setDate(1);
    let day = date.getDay();
    if (day == 0) return 6;
    return day - 1;
}


var lang = {
    weekDays: ['понедельник','вторник','среда','четверг','пятница','суббота','воскресенье'],
    shortWeekDays: ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],
    months: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'],
    shortMonths: ['янв.', 'февр.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],

}

console.log(lang, pmd);
export default {
  name: 'Calendar',
  data: function() {
      return {
          state: new Date(this.year, this.month),
          selected: this.initState ? Array.from(this.initState) : [],
          lang,
          pmd
      }
  },
  methods: {
      offsetToDate: function(offset) {
          let date = new Date(this._year, this._month);
          date.setDate(offset);
          return date;
      },
      incMonth: function() {
          this.state = new Date(this._year, this._month + 1);
          this.onMonthChange(this.state);
      },
      decMonth: function() {
          this.state = new Date(this._year, this._month - 1);
          this.onMonthChange(this.state);
      },
      dateNumber: function(offset) {
          let date = this.offsetToDate(offset);
          return date.getDate();
      },
      isThisMonth: function(offset) {
          let date = this.offsetToDate(offset);
          if ( date.getMonth() != this.state.getMonth() ) return false
          return true;
      },
      handleDateClick: function(offset) {
          let date = this.offsetToDate(offset);
          if (this.selected.length == 2) {
              this.selected = [date];
              this.onStartSelect(this._selected);
          }
          else if (this.selected.length == 1) { 
              if (this.selected[0].getTime() > date.getTime()) {
                  this.selected = [date];
                  this.onStartSelect(this.selected);
              } else {
                  this.selected.push(date);
                  this.onEndSelect(this.selected);
              }
          }
          else {
                this.selected.push(date);
                this.onStartSelect(this.selected);
          }
      },
      dateClass: function(offset) {
          let date = this.offsetToDate(offset);
          if (this.selected.length == 0) return '';
          else if (this.selected.length == 1) {
            if (this.selected[0].getTime() == date.getTime()) return 'selected';
          }
          else {
              if (date.getTime() > this.selected[0].getTime() && date.getTime() < this.selected[1].getTime()) return 'inrange'
              if (date.getTime() == this.selected[0].getTime() || this.selected[1].getTime() == date.getTime()) return 'selected'
          }       
      }
  },
  /*filters: {
      monthType: function(offset) {
          let date = new Date(this.state.getYear(), this.state.getMonth() );
          date.setDate(offset);
          if ( date.getMonth() != this.state.getMonth() ) return 'other'
          return '';
      }
  },*/
  computed: {
      _year: function() {
          return this.state.getFullYear();
      },
      _month: function() {
          return this.state.getMonth();
      },
  },
  props: {
      initState: [Array, Date],
      year: {
          type: Number,
          default: new Date().getFullYear(),
      },
      month: {
          type: Number,
          default: new Date().getMonth(),
      },
      onStartSelect: {
          type: Function,
          required: true,
      },
      onEndSelect: {
          type: Function,
          required: true,
      },
      onMonthChange: Function,
      disablePrev: Boolean,
      disableNext: Boolean
  },
}
</script>

<style scoped>
    .days-container {
        display: flex;
        padding: 0;
        margin: 0;
        list-style-type: none;
        flex-direction: row;
        flex-wrap: wrap;
    }
    .day {
        display: inline-block;
        white-space: nowrap;
        text-align: center;
        vertical-align: middle;
        min-width: 32px;
        width: 32px;
        height: 24px;
        line-height: 24px;
        font-size: 12px;
        border-radius: 4px;
        border: 1px solid transparent;
        white-space: nowrap;
        cursor: pointer;
        color: black;
    }
    .calendar {
        display: inline-block;
        outline: 1px solid red;
        width: 238px;
        max-width: 238px;
    }
    .header {
        display: flex;
        justify-content: center;
    }
    .title {
        position: absolute;
        margin: auto;
    }
    .btn {
        border: 0;
        background: 0;
        color: 0;
        outline: 0;
        /*position: relative;*/
    }
    .prev {
        margin-right: auto;
    }
    .next {
        margin-left: auto;
    }
    .hover:hover {
        background-color: #DADADA;
    }
    .other {
        color: grey;
    }
    .selected {
        background: aqua !important;
    }
    .inrange {
        background: purple;
    }
</style>
