#include <iostream>
using namespace std;

#define NUM_THEN for(int i = 0; i < length; i++) if (array[i] == num)

struct Set {
    int length = 0;
    int *array;
    Set() {}
    bool has(int num) {
        NUM_THEN return true;
        return false;
    }
    void add(int num) {
        NUM_THEN return;
        length += 1;
        array = (int *)realloc(array, sizeof(int) * length);
        array[length - 1] = num;
    }
    void remove(int num) {
        NUM_THEN {
            for(int j = i; j < length - 1; j++) array[j] = array[j+1];
            length -= 1;
            array = (int *)realloc(array, sizeof(int) * length);
            return;
        }
    }
    Set operator + (Set &s) {
        Set set;
        int m = this->length;
        int n = s.length;
        int len = m < n ? m : n;
        Set minSet = m < n ? *this : s;
        for (int i = 0; i < len; i++) {
            set.add(s.array[i]);
            set.add(this->array[i]);
        }
        len = m+n-len;
        for (int i = len; i < len; i++) {
            set.add(minSet.array[i]);
        }
        return set;
    }
    Set operator * (Set &s) {
        Set set;
        int m = this->length;
        int n = s.length;
        int min = m < n ? m : n;
        Set minSet = m < n ? *this : s;
        for (int i = 0; i < min; i++) {
            int num = minSet.array[i];
            if (this->has(num) && s.has(num)) set.add(num);
        }
        return set;
    }
};

int main() {
    Set s;
    s.add(1);
    cout << s.has(1);
}
